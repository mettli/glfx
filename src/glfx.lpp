%option yylineno
%option noyywrap
%option fast
%option ecs
%option prefix="glfx"
%option outfile="glfxScanner.cpp" header-file="glfxScanner.h"

%{
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for yywrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfxParser.h"
    #include "glfxClasses.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
%}

ID_BLCK [a-zA-Z][a-zA-Z0-9_]*
NUM_BLCK 0|([1-9][0-9]*)
STR_BLCK \"[^"\n]*\"
FLOAT_BLCK [0-9]*((\.[0-9])|([0-9]\.))[0-9]*

%%
"program"                                       glfxlval.boolean=false; return PROGRAM;
"stages"                                        glfxlval.boolean=true; return PROGRAM;
"shader"                                        glfxlval.lineno=yylineno; return SHADER;
"interface"                                     glfxlval.lineno=yylineno; return INTERFACE;
"sampler"                                       glfxlval.lineno=yylineno; glfxlval.strs[0]=yytext; return SAMPLER;
^"#include"[\t ]+{STR_BLCK}[\t ]*\n             {
                                                    string tmp(yytext);
                                                    size_t firstLoc=tmp.find('"')+1;
                                                    size_t secondLoc=tmp.find('"', firstLoc);
                                                    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
                                                    glfxlval.lineno=yylineno-1; // flex has already jumped one line, since \n was eaten
                                                    return INCLUDE;
                                                }
"patch"|"centroid"                              if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.strs[0]=yytext; return STORAGET;}
"vs"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=VS; return SHADER_TYPE;}
"tc"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=TC; return SHADER_TYPE;}
"te"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=TE; return SHADER_TYPE;}
"gs"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=GS; return SHADER_TYPE;}
"fs"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=FS; return SHADER_TYPE;}
"cs"                                            if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.sType=CS; return SHADER_TYPE;}
{NUM_BLCK}                                      if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.num=atoi(yytext); return NUM;}
{FLOAT_BLCK}                                    if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.fnum=(float)atof(yytext); return FLOAT;}
"in"|"out"                                      if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.lineno=yylineno; glfxlval.strs[0]=yytext; return STORAGEQ;}
"gl_FragDepth"                                  if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.lineno=yylineno; glfxlval.strs[0]=yytext; return GL_FRAGDEPTH;}
"true"                                          if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.num=1; return NUM;}
"false"                                         if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.num=0; return NUM;}
{ID_BLCK}                                       if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {glfxlval.lineno=yylineno; glfxlval.strs[0]=yytext; return IDENTIFIER;}
"("                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return LP;}
")"                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return RP;}
"{"                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return LB;}
"}"                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return RB;}
"["[\t ]*"]"                                    if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return EMPTY_ARRAY_BRACKETS;}
","                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return COMMA;}
"="                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return EQUALS;}
";"                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return SC;}
":"                                             if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {return COLON;}
\/\/[^\n\\]*(\\+[^\\][^\n\\]*)*\n               if(gLexPassthrough) gEffect->m_sharedCode<<yytext; // Single line comment (with possible continuation)
\/\*[^*]*\*(([^*/][^*]*)*\*)*\/                 if(gLexPassthrough) gEffect->m_sharedCode<<yytext; // Multiline comment
[\t\n ]                                         if(gLexPassthrough) gEffect->m_sharedCode<<yytext;
.                                               if(gLexPassthrough) gEffect->m_sharedCode<<yytext; else {errLex(yytext);}
%%

void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<yylineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
            throw "Brace balance error\n";
        else if(c==openChar)
            braceBalance++;
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
                throw "Brace balance error\n";
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

#line 2 "glfxScanner.cpp"

#line 4 "glfxScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glfx_create_buffer
#define yy_delete_buffer glfx_delete_buffer
#define yy_flex_debug glfx_flex_debug
#define yy_init_buffer glfx_init_buffer
#define yy_flush_buffer glfx_flush_buffer
#define yy_load_buffer_state glfx_load_buffer_state
#define yy_switch_to_buffer glfx_switch_to_buffer
#define yyin glfxin
#define yyleng glfxleng
#define yylex glfxlex
#define yylineno glfxlineno
#define yyout glfxout
#define yyrestart glfxrestart
#define yytext glfxtext
#define yywrap glfxwrap
#define yyalloc glfxalloc
#define yyrealloc glfxrealloc
#define yyfree glfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glfxrestart(glfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t glfxleng;

extern FILE *glfxin, *glfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE glfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-glfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < glfxleng; ++yyl )\
                    if ( glfxtext[yyl] == '\n' )\
                        --glfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glfxrestart()), so that the user can continue scanning by
	 * just pointing glfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t glfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glfxwrap()'s to do buffer switches
 * instead of setting up a fresh glfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glfxrestart (FILE *input_file  );
void glfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glfx_create_buffer (FILE *file,int size  );
void glfx_delete_buffer (YY_BUFFER_STATE b  );
void glfx_flush_buffer (YY_BUFFER_STATE b  );
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glfxpop_buffer_state (void );

static void glfxensure_buffer_stack (void );
static void glfx_load_buffer_state (void );
static void glfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *glfxalloc (yy_size_t  );
void *glfxrealloc (void *,yy_size_t  );
void glfxfree (void *  );

#define yy_new_buffer glfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glfxin = (FILE *) 0, *glfxout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int glfxlineno;

int glfxlineno = 1;

extern char *glfxtext;
#define yytext_ptr glfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[4138] =
    {
 {   0,   0 }, {   0,4095 }, {   0,   0 }, {   0,4093 }, {   1,  90 },
 {   2,  92 }, {   3,  94 }, {   4,  90 }, {   5,  90 }, {   6,  96 },
 {   7,  98 }, {   8,  90 }, {   9, 100 }, {  10, 102 }, {  11, 105 },
 {  12, 107 }, {  13, 111 }, {  14, 126 }, {  15, 128 }, {  16, 130 },
 {  17, 132 }, {  18, 132 }, {  19, 132 }, {  20, 175 }, {  21,  90 },
 {  22,  90 }, {  23,  90 }, {  24, 132 }, {  25, 181 }, {  26, 132 },
 {  27, 132 }, {  28, 224 }, {  29, 267 }, {  30, 132 }, {  31, 310 },
 {  32, 132 }, {  33, 132 }, {  34, 132 }, {  35, 353 }, {  36, 396 },
 {  37, 132 }, {  38, 439 }, {  39, 482 }, {  40, 132 }, {  41, 525 },
 {  42, 179 }, {  43, 183 }, {   0,   0 }, {   0,4048 }, {   1,  45 },

 {   2,  47 }, {   3,  49 }, {   4,  45 }, {   5, 151 }, {   6,  51 },
 {   7,  53 }, {   8,  45 }, {   9,  55 }, {  10,  57 }, {  11,  60 },
 {  12,  62 }, {  13,  66 }, {  14,  81 }, {  15,  83 }, {  16,  85 },
 {  17,  87 }, {  18,  87 }, {  19,  87 }, {  20, 130 }, {  21,  45 },
 {  22,  45 }, {  23,  45 }, {  24,  87 }, {  25, 136 }, {  26,  87 },
 {  27,  87 }, {  28, 179 }, {  29, 222 }, {  30,  87 }, {  31, 265 },
 {  32,  87 }, {  33,  87 }, {  34,  87 }, {  35, 308 }, {  36, 351 },
 {  37,  87 }, {  38, 394 }, {  39, 437 }, {  40,  87 }, {  41, 480 },
 {  42, 134 }, {  43, 138 }, {   0,  33 }, {   0,4003 }, {   0,  32 },
 {   0,4001 }, {   0,  32 }, {   0,3999 }, {   0,  21 }, {   0,3997 },

 {   0,  22 }, {   0,3995 }, {   0,  26 }, {   0,3993 }, {   0,  33 },
 {   0,3991 }, {   0,   0 }, {   0,  33 }, {   0,3988 }, {   0,  14 },
 {   0,3986 }, {   0,   0 }, {   0,   0 }, {   0,  14 }, {   0,3982 },
 {   0,   0 }, {   8, 463 }, {  12, 124 }, {  13, 124 }, {  11, 508 },
 {  10, 125 }, {   0,   0 }, {  12, 551 }, {  13, 551 }, {  10, 121 },
 {   0,   0 }, {  12, 551 }, {  13, 551 }, {   0,  29 }, {   0,3967 },
 {   0,  28 }, {   0,3965 }, {   0,  27 }, {   0,3963 }, {   0,  20 },
 {   0,3961 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12, 532 }, {  13, 532 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  17, 532 }, {  18, 532 }, {  19, 532 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 532 }, {  24, 532 },
 {  25, 532 }, {  26, 532 }, {  27, 532 }, {  28, 532 }, {  29, 532 },
 {  30, 532 }, {  31, 532 }, {  32, 532 }, {  33, 532 }, {  34, 532 },
 {  35, 532 }, {  36, 532 }, {  37, 532 }, {  38, 532 }, {  39, 532 },
 {  40, 532 }, {  41, 532 }, {   0,  33 }, {   0,3918 }, {   0,   0 },
 {   2, 532 }, {   0,  23 }, {   0,3914 }, {   0,  20 }, {   0,3912 },
 {   0,  24 }, {   0,3910 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, 483 }, {  13, 483 }, {   0,  33 }, {   0,3897 },

 {  22, 536 }, {  17, 483 }, {  18, 483 }, {  19, 483 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23, 483 }, {  24, 483 }, {  25, 483 },
 {  26, 483 }, {  27, 532 }, {  28, 483 }, {  29, 483 }, {  30, 483 },
 {  31, 483 }, {  32, 483 }, {  33, 483 }, {  34, 483 }, {  35, 483 },
 {  36, 483 }, {  37, 483 }, {  38, 575 }, {  39, 483 }, {  40, 483 },
 {  41, 483 }, {   0,  20 }, {   0,3869 }, {   0,  15 }, {   0,3867 },
 {  31, 527 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  15 },
 {   0,3861 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 440 },
 {  13, 440 }, {  12, 533 }, {  13, 533 }, {   0,   0 }, {  17, 440 },
 {  18, 440 }, {  19, 440 }, {  12, 532 }, {  13, 532 }, {   0,   0 },

 {  23, 440 }, {  24, 575 }, {  25, 440 }, {  26, 440 }, {  27, 440 },
 {  28, 440 }, {  29, 440 }, {  30, 440 }, {  31, 440 }, {  32, 440 },
 {  33, 440 }, {  34, 440 }, {  35, 440 }, {  36, 440 }, {  37, 440 },
 {  38, 618 }, {  39, 440 }, {  40, 440 }, {  41, 440 }, {   0,  20 },
 {   0,3826 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12, 397 }, {  13, 397 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17, 397 }, {  18, 397 }, {  19, 397 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 397 }, {  24, 397 },
 {  25, 397 }, {  26, 397 }, {  27, 397 }, {  28, 397 }, {  29, 397 },

 {  30, 397 }, {  31, 397 }, {  32, 618 }, {  33, 397 }, {  34, 397 },
 {  35, 397 }, {  36, 397 }, {  37, 397 }, {  38, 661 }, {  39, 397 },
 {  40, 397 }, {  41, 397 }, {   0,  20 }, {   0,3783 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12, 354 }, {  13, 354 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17, 354 }, {  18, 354 }, {  19, 354 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23, 354 }, {  24, 354 }, {  25, 354 }, {  26, 354 },
 {  27, 354 }, {  28, 354 }, {  29, 354 }, {  30, 354 }, {  31, 354 },
 {  32, 354 }, {  33, 354 }, {  34, 661 }, {  35, 354 }, {  36, 354 },

 {  37, 354 }, {  38, 354 }, {  39, 354 }, {  40, 354 }, {  41, 354 },
 {   0,  20 }, {   0,3740 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 311 }, {  13, 311 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17, 311 }, {  18, 311 },
 {  19, 311 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 311 },
 {  24, 311 }, {  25, 311 }, {  26, 311 }, {  27, 311 }, {  28, 311 },
 {  29, 311 }, {  30, 311 }, {  31, 311 }, {  32, 311 }, {  33, 311 },
 {  34, 311 }, {  35, 311 }, {  36, 311 }, {  37, 311 }, {  38, 311 },
 {  39, 311 }, {  40, 661 }, {  41, 311 }, {   0,  20 }, {   0,3697 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, 268 }, {  13, 268 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17, 268 }, {  18, 268 }, {  19, 268 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23, 268 }, {  24, 661 }, {  25, 268 },
 {  26, 268 }, {  27, 268 }, {  28, 268 }, {  29, 268 }, {  30, 268 },
 {  31, 268 }, {  32, 268 }, {  33, 268 }, {  34, 268 }, {  35, 268 },
 {  36, 268 }, {  37, 704 }, {  38, 268 }, {  39, 268 }, {  40, 268 },
 {  41, 268 }, {   0,  20 }, {   0,3654 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12, 225 },
 {  13, 225 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17, 225 },
 {  18, 225 }, {  19, 225 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23, 225 }, {  24, 704 }, {  25, 225 }, {  26, 225 }, {  27, 225 },
 {  28, 225 }, {  29, 225 }, {  30, 747 }, {  31, 225 }, {  32, 225 },
 {  33, 225 }, {  34, 225 }, {  35, 225 }, {  36, 225 }, {  37, 225 },
 {  38, 225 }, {  39, 790 }, {  40, 225 }, {  41, 225 }, {   0,  20 },
 {   0,3611 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12, 182 }, {  13, 182 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  17, 182 }, {  18, 182 }, {  19, 182 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 182 }, {  24, 182 },
 {  25, 790 }, {  26, 182 }, {  27, 833 }, {  28, 182 }, {  29, 182 },
 {  30, 182 }, {  31, 182 }, {  32, 182 }, {  33, 182 }, {  34, 182 },
 {  35, 182 }, {  36, 182 }, {  37, 876 }, {  38, 182 }, {  39, 182 },
 {  40, 182 }, {  41, 182 }, {   0,  20 }, {   0,3568 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12, 139 }, {  13, 139 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17, 139 }, {  18, 139 }, {  19, 139 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  23, 139 }, {  24, 139 }, {  25, 139 }, {  26, 139 },
 {  27, 139 }, {  28, 139 }, {  29, 139 }, {  30, 139 }, {  31, 139 },
 {  32, 139 }, {  33, 139 }, {  34, 139 }, {  35, 139 }, {  36, 139 },
 {  37, 139 }, {  38, 876 }, {  39, 139 }, {  40, 139 }, {  41, 139 },
 {   0,   0 }, {   0,3525 }, {   1, 876 }, {   2, 876 }, {   3, 876 },
 {   4, 876 }, {   5, 876 }, {   6, 876 }, {   7, 876 }, {   8, 921 },
 {   9, 876 }, {  10, 876 }, {  11, 876 }, {  12, 876 }, {  13, 876 },
 {  14, 876 }, {  15, 876 }, {  16, 876 }, {  17, 876 }, {  18, 876 },
 {  19, 876 }, {  20, 876 }, {  21, 876 }, {  22, 876 }, {  23, 876 },
 {  24, 876 }, {  25, 876 }, {  26, 876 }, {  27, 876 }, {  28, 876 },

 {  29, 876 }, {  30, 876 }, {  31, 876 }, {  32, 876 }, {  33, 876 },
 {  34, 876 }, {  35, 876 }, {  36, 876 }, {  37, 876 }, {  38, 876 },
 {  39, 876 }, {  40, 876 }, {  41, 876 }, {  42, 876 }, {  43, 876 },
 {   0,   0 }, {   0,3480 }, {   1, 921 }, {   2, 921 }, {   3, 148 },
 {   4, 921 }, {   5, 921 }, {   6, 921 }, {   7, 921 }, {   8, 921 },
 {   9, 921 }, {  10, 921 }, {  11, 921 }, {  12, 921 }, {  13, 921 },
 {  14, 921 }, {  15, 921 }, {  16, 921 }, {  17, 921 }, {  18, 921 },
 {  19, 921 }, {  20, 921 }, {  21, 966 }, {  22, 921 }, {  23, 921 },
 {  24, 921 }, {  25, 921 }, {  26, 921 }, {  27, 921 }, {  28, 921 },
 {  29, 921 }, {  30, 921 }, {  31, 921 }, {  32, 921 }, {  33, 921 },

 {  34, 921 }, {  35, 921 }, {  36, 921 }, {  37, 921 }, {  38, 921 },
 {  39, 921 }, {  40, 921 }, {  41, 921 }, {  42, 921 }, {  43, 921 },
 {   0,   0 }, {   0,3435 }, {   0,   0 }, {   0,   0 }, {   0,  14 },
 {   0,3431 }, {   0,  20 }, {   0,3429 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-426 }, {   0,   0 }, {  12,   0 }, {  13,   0 },
 {  10,-430 }, {   0,   0 }, {  12,   0 }, {  13,   0 }, {  12,   0 },
 {  13,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },

 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {   0,   0 },
 {   0,3386 }, {   0,   0 }, {   2,   0 }, {   0,  25 }, {   0,3382 },
 {   0,  20 }, {   0,3380 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,3370 }, {   0,   0 }, {  12, -49 }, {  13, -49 },
 {   0,   0 }, {   0,   0 }, {  22,   4 }, {  17, -49 }, {  18, -49 },
 {  19, -49 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, -49 },
 {  24, -49 }, {  25, -49 }, {  26, -49 }, {  27, -49 }, {  28, -49 },
 {  29, -49 }, {  30, -49 }, {  31, -49 }, {  32, -49 }, {  33, -49 },

 {  34, 911 }, {  35, -49 }, {  36, -49 }, {  37, -49 }, {  38, -49 },
 {  39, -49 }, {  40, -49 }, {  41, -49 }, {   0,  13 }, {   0,3337 },
 {  34,  97 }, {   0,  15 }, {   0,3334 }, {   0,  30 }, {   0,3332 },
 {   0,   0 }, {   0,  15 }, {   0,3329 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12, -92 }, {  13, -92 }, {   0,   0 }, {  12,   0 },
 {  13,   0 }, {  17, -92 }, {  18, -92 }, {  19, -92 }, {  12,  -5 },
 {  13,  -5 }, {   0,   0 }, {  23, -92 }, {  24, -92 }, {  25, -92 },
 {  26, -92 }, {  27, -92 }, {  28, -92 }, {  29, -92 }, {  30, -92 },
 {  31, -92 }, {  32, -92 }, {  33, -92 }, {  34, -92 }, {  35, -92 },
 {  36, -92 }, {  37, -92 }, {  38, -92 }, {  39, -92 }, {  40, -92 },

 {  41, -92 }, {   0,  20 }, {   0,3294 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-135 },
 {  13,-135 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-135 },
 {  18,-135 }, {  19,-135 }, {   0,   0 }, {   0,3273 }, {   0,   0 },
 {  23,-135 }, {  24,-135 }, {  25,-135 }, {  26,-135 }, {  27,-135 },
 {  28,-135 }, {  29,-135 }, {  30,-135 }, {  31,-135 }, {  32, 868 },
 {  33,-135 }, {  34,-135 }, {  35,-135 }, {  36,-135 }, {  37,-135 },
 {  38,-135 }, {  39,-135 }, {  40,-135 }, {  41,-135 }, {   0,  12 },
 {   0,3251 }, {   0,  31 }, {   0,3249 }, {  25,  37 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-178 }, {  13,-178 }, {   0,   0 },
 {   0,3236 }, {   0,   0 }, {  17,-178 }, {  18,-178 }, {  19,-178 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-178 }, {  24,-178 },
 {  25,-178 }, {  26,-178 }, {  27,-178 }, {  28,-178 }, {  29,-178 },
 {  30,-178 }, {  31,-178 }, {  32,-178 }, {  33,-178 }, {  34,-178 },
 {  35,-178 }, {  36,-178 }, {  37,-178 }, {  38,-178 }, {  39,-178 },
 {  40,-178 }, {  41,-178 }, {   0,  20 }, {   0,3208 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,  34 }, {   0,   0 }, {   0,3202 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  12,-221 }, {  13,-221 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-221 }, {  18,-221 }, {  19,-221 }, {   0,   0 }, {   0,3187 },
 {   0,   0 }, {  23, 825 }, {  24,-221 }, {  25,-221 }, {  26,-221 },
 {  27,-221 }, {  28,-221 }, {  29,-221 }, {  30,-221 }, {  31,-221 },
 {  32,-221 }, {  33,-221 }, {  34,-221 }, {  35,-221 }, {  36,-221 },
 {  37,-221 }, {  38,-221 }, {  39,-221 }, {  40,-221 }, {  41,-221 },
 {   0,  11 }, {   0,3165 }, {   0,   0 }, {   0,   0 }, {  40,  15 },
 {  26,  43 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-264 }, {  13,-264 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-264 }, {  18,-264 },

 {  19,-264 }, {   0,   0 }, {   0,3144 }, {   0,   0 }, {  23,-264 },
 {  24,-264 }, {  25,-264 }, {  26,-264 }, {  27,-264 }, {  28,-264 },
 {  29,-264 }, {  30,-264 }, {  31,-264 }, {  32,-264 }, {  33,-264 },
 {  34,-264 }, {  35,-264 }, {  36,-264 }, {  37,-264 }, {  38,-264 },
 {  39,-264 }, {  40,-264 }, {  41,-264 }, {   0,  16 }, {   0,3122 },
 {   0,   0 }, {   0,3120 }, {   0,   0 }, {   2,   5 }, {  27,  24 },
 {   0,   0 }, {   0,3115 }, {   0,   0 }, {   2,   0 }, {   0,   0 },
 {   4,2937 }, {  12,-307 }, {  13,-307 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-307 }, {  18,-307 }, {  19,-307 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-307 }, {  24,-307 }, {  25,-307 },

 {  26,-307 }, {  27,-307 }, {  28,-307 }, {  29,-307 }, {  30,-307 },
 {  31,-307 }, {  32,-307 }, {  33,-307 }, {  34,-307 }, {  35,-307 },
 {  36,-307 }, {  37,-307 }, {  38,-307 }, {  39, 782 }, {  40,-307 },
 {  41,-307 }, {   0,  20 }, {   0,3079 }, {   0,   0 }, {   0,3077 },
 {   0,   0 }, {   2,   5 }, {   3,  13 }, {   0,   0 }, {   0,3072 },
 {   0,   0 }, {   2,   0 }, {   3,   8 }, {   0,   0 }, {  12,-350 },
 {  13,-350 }, {   0,   6 }, {   0,3064 }, {   0,   0 }, {  17,-350 },
 {  18,-350 }, {  19,-350 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-350 }, {  24,-350 }, {  25,-350 }, {  26,-350 }, {  27,-350 },
 {  28,-350 }, {  29,-350 }, {  30,-350 }, {  31,-350 }, {  32,-350 },

 {  33,-350 }, {  34,-350 }, {  35,-350 }, {  36,-350 }, {  37,-350 },
 {  38,-350 }, {  39, 782 }, {  40,-350 }, {  41,-350 }, {   0,  20 },
 {   0,3036 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-393 }, {  13,-393 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-393 }, {  18,-393 }, {  19,-393 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-393 }, {  24,-393 },
 {  25,-393 }, {  26,-393 }, {  27,-393 }, {  28,-393 }, {  29,-393 },
 {  30,-393 }, {  31,-393 }, {  32,-393 }, {  33,-393 }, {  34,-393 },
 {  35,-393 }, {  36,-393 }, {  37,-393 }, {  38,-393 }, {  39, 782 },

 {  40,-393 }, {  41,-393 }, {   0,  20 }, {   0,2993 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-436 }, {  13,-436 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-436 }, {  18,-436 }, {  19,-436 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-436 }, {  24,-436 }, {  25,-436 }, {  26,-436 },
 {  27,-436 }, {  28,-436 }, {  29,-436 }, {  30,-436 }, {  31,-436 },
 {  32,-436 }, {  33,-436 }, {  34,-436 }, {  35, 782 }, {  36,-436 },
 {  37,-436 }, {  38,-436 }, {  39,-436 }, {  40,-436 }, {  41,-436 },
 {   0,  20 }, {   0,2950 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-479 }, {  13,-479 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-479 }, {  18,-479 },
 {  19,-479 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-479 },
 {  24,-479 }, {  25,-479 }, {  26,-479 }, {  27,-479 }, {  28,-479 },
 {  29,-479 }, {  30,-479 }, {  31,-479 }, {  32,-479 }, {  33, 782 },
 {  34,-479 }, {  35,-479 }, {  36,-479 }, {  37,-479 }, {  38,-479 },
 {  39,-479 }, {  40,-479 }, {  41,-479 }, {   0,  20 }, {   0,2907 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  12,-522 }, {  13,-522 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-522 }, {  18,-522 }, {  19,-522 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-522 }, {  24, 782 }, {  25,-522 },
 {  26,-522 }, {  27,-522 }, {  28,-522 }, {  29,-522 }, {  30,-522 },
 {  31,-522 }, {  32,-522 }, {  33,-522 }, {  34,-522 }, {  35,-522 },
 {  36,-522 }, {  37,-522 }, {  38,-522 }, {  39,-522 }, {  40,-522 },
 {  41,-522 }, {   0,  20 }, {   0,2864 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-565 },
 {  13,-565 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-565 },

 {  18,-565 }, {  19,-565 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-565 }, {  24, 782 }, {  25,-565 }, {  26,-565 }, {  27,-565 },
 {  28,-565 }, {  29,-565 }, {  30,-565 }, {  31,-565 }, {  32,-565 },
 {  33,-565 }, {  34,-565 }, {  35,-565 }, {  36,-565 }, {  37,-565 },
 {  38,-565 }, {  39,-565 }, {  40,-565 }, {  41,-565 }, {   0,   9 },
 {   0,2821 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-608 }, {  13,-608 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-608 }, {  18,-608 }, {  19,-608 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-608 }, {  24,-608 },

 {  25,-608 }, {  26,-608 }, {  27,-608 }, {  28,-608 }, {  29,-608 },
 {  30,-608 }, {  31,-608 }, {  32,-608 }, {  33,-608 }, {  34,-608 },
 {  35,-608 }, {  36,-608 }, {  37,-608 }, {  38,-608 }, {  39,-608 },
 {  40,-608 }, {  41,-608 }, {   0,  10 }, {   0,2778 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-651 }, {  13,-651 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-651 }, {  18,-651 }, {  19,-651 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-651 }, {  24,-651 }, {  25,-651 }, {  26,-651 },
 {  27,-651 }, {  28,-651 }, {  29,-651 }, {  30,-651 }, {  31,-651 },

 {  32,-651 }, {  33,-651 }, {  34,-651 }, {  35,-651 }, {  36,-651 },
 {  37,-651 }, {  38,-651 }, {  39,-651 }, {  40,-651 }, {  41,-651 },
 {   0,  20 }, {   0,2735 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-694 }, {  13,-694 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-694 }, {  18,-694 },
 {  19,-694 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-694 },
 {  24,-694 }, {  25,-694 }, {  26,-694 }, {  27,-694 }, {  28,-694 },
 {  29,-694 }, {  30,-694 }, {  31,-694 }, {  32,-694 }, {  33,-694 },
 {  34,-694 }, {  35,-694 }, {  36,-694 }, {  37,-694 }, {  38,-694 },

 {  39,-694 }, {  40, 696 }, {  41,-694 }, {   0,   8 }, {   0,2692 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-737 }, {  13,-737 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-737 }, {  18,-737 }, {  19,-737 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-737 }, {  24,-737 }, {  25,-737 },
 {  26,-737 }, {  27,-737 }, {  28,-737 }, {  29,-737 }, {  30,-737 },
 {  31,-737 }, {  32,-737 }, {  33,-737 }, {  34,-737 }, {  35,-737 },
 {  36,-737 }, {  37,-737 }, {  38,-737 }, {  39,-737 }, {  40,-737 },
 {  41,-737 }, {   0,   0 }, {   0,2649 }, {   1,   0 }, {   2,   0 },

 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,  45 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {   0,   0 }, {   0,2604 }, {   1, 608 }, {   2, 608 },
 {   3, 608 }, {   4, 608 }, {   5, 608 }, {   6, 608 }, {   7, 608 },

 {   8, 653 }, {   9, 608 }, {  10, 608 }, {  11,-645 }, {  12, 608 },
 {  13, 608 }, {  14, 608 }, {  15, 608 }, {  16, 608 }, {  17, 608 },
 {  18, 608 }, {  19, 608 }, {  20, 608 }, {  21, 608 }, {  22, 608 },
 {  23, 608 }, {  24, 608 }, {  25, 608 }, {  26, 608 }, {  27, 608 },
 {  28, 608 }, {  29, 608 }, {  30, 608 }, {  31, 608 }, {  32, 608 },
 {  33, 608 }, {  34, 608 }, {  35, 608 }, {  36, 608 }, {  37, 608 },
 {  38, 608 }, {  39, 608 }, {  40, 608 }, {  41, 608 }, {  42, 608 },
 {  43, 608 }, {   0,   0 }, {   0,2559 }, {   1,   0 }, {   2,   0 },
 {   3,-773 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },

 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,  45 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {   0,   0 }, {   0,2514 }, {   1, 608 }, {   2, 608 },
 {   3, 608 }, {   4, 608 }, {   5, 608 }, {   6, 608 }, {   7, 608 },
 {   8, 608 }, {   9, 608 }, {  10, 608 }, {  11, 608 }, {  12, 608 },
 {  13, 608 }, {  14, 608 }, {  15, 608 }, {  16, 608 }, {  17, 608 },

 {  18, 608 }, {  19, 608 }, {  20, 608 }, {  21,   0 }, {  22, 608 },
 {  23, 608 }, {  24, 608 }, {  25, 608 }, {  26, 608 }, {  27, 608 },
 {  28, 608 }, {  29, 608 }, {  30, 608 }, {  31, 608 }, {  32, 608 },
 {  33, 608 }, {  34, 608 }, {  35, 608 }, {  36, 608 }, {  37, 608 },
 {  38, 608 }, {  39, 608 }, {  40, 608 }, {  41, 608 }, {  42, 608 },
 {  43, 608 }, {   0,  20 }, {   0,2469 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-960 },
 {  13,-960 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-960 },
 {  18,-960 }, {  19,-960 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  23,-960 }, {  24,-960 }, {  25,-960 }, {  26,-960 }, {  27,-960 },
 {  28,-960 }, {  29,-960 }, {  30,-960 }, {  31,-960 }, {  32,-960 },
 {  33,-960 }, {  34,-960 }, {  35,-960 }, {  36,-960 }, {  37,-960 },
 {  38,-960 }, {  39, 608 }, {  40,-960 }, {  41,-960 }, {   0,  20 },
 {   0,2426 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1003 }, {  13,-1003 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1003 }, {  18,-1003 }, {  19,-1003 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1003 }, {  24,-1003 },
 {  25,-1003 }, {  26,-1003 }, {  27,-1003 }, {  28,-1003 }, {  29,-1003 },

 {  30,-1003 }, {  31,-1003 }, {  32,-1003 }, {  33,-1003 }, {  34,-1003 },
 {  35,-1003 }, {  36,-1003 }, {  37,-1003 }, {  38, 608 }, {  39,-1003 },
 {  40,-1003 }, {  41,-1003 }, {   0,  20 }, {   0,2383 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1046 }, {  13,-1046 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1046 }, {  18,-1046 }, {  19, 608 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1046 }, {  24,-1046 }, {  25,-1046 }, {  26,-1046 },
 {  27,-1046 }, {  28,-1046 }, {  29,-1046 }, {  30,-1046 }, {  31,-1046 },
 {  32,-1046 }, {  33,-1046 }, {  34,-1046 }, {  35,-1046 }, {  36,-1046 },

 {  37,-1046 }, {  38,-1046 }, {  39,-1046 }, {  40,-1046 }, {  41,-1046 },
 {   0,  20 }, {   0,2340 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1089 }, {  13,-1089 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1089 }, {  18,-1089 },
 {  19,-1089 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1089 },
 {  24,-1089 }, {  25,-1089 }, {  26,-1089 }, {  27, 608 }, {  28,-1089 },
 {  29,-1089 }, {  30,-1089 }, {  31,-1089 }, {  32,-1089 }, {  33,-1089 },
 {  34,-1089 }, {  35,-1089 }, {  36,-1089 }, {  37,-1089 }, {  38,-1089 },
 {  39,-1089 }, {  40,-1089 }, {  41,-1089 }, {   0,  16 }, {   0,2297 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1132 }, {  13,-1132 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1132 }, {  18,-1132 }, {  19,-1132 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1132 }, {  24,-1132 }, {  25,-1132 },
 {  26,-1132 }, {  27,-1132 }, {  28,-1132 }, {  29,-1132 }, {  30,-1132 },
 {  31,-1132 }, {  32,-1132 }, {  33,-1132 }, {  34,-1132 }, {  35,-1132 },
 {  36,-1132 }, {  37,-1132 }, {  38,-1132 }, {  39,-1132 }, {  40,-1132 },
 {  41,-1132 }, {   0,  20 }, {   0,2254 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1175 },
 {  13,-1175 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1175 },
 {  18,-1175 }, {  19,-1175 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1175 }, {  24,-1175 }, {  25, 565 }, {  26,-1175 }, {  27,-1175 },
 {  28,-1175 }, {  29,-1175 }, {  30,-1175 }, {  31,-1175 }, {  32,-1175 },
 {  33,-1175 }, {  34,-1175 }, {  35,-1175 }, {  36,-1175 }, {  37,-1175 },
 {  38,-1175 }, {  39,-1175 }, {  40,-1175 }, {  41,-1175 }, {   0,  20 },
 {   0,2211 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1218 }, {  13,-1218 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  17,-1218 }, {  18,-1218 }, {  19,-1218 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1218 }, {  24,-1218 },
 {  25,-1218 }, {  26,-1218 }, {  27,-1218 }, {  28,-1218 }, {  29, 565 },
 {  30,-1218 }, {  31,-1218 }, {  32,-1218 }, {  33,-1218 }, {  34,-1218 },
 {  35,-1218 }, {  36,-1218 }, {  37,-1218 }, {  38,-1218 }, {  39,-1218 },
 {  40,-1218 }, {  41,-1218 }, {   0,  20 }, {   0,2168 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1261 }, {  13,-1261 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1261 }, {  18,-1261 }, {  19,-1261 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  23,-1261 }, {  24,-1261 }, {  25,-1261 }, {  26,-1261 },
 {  27,-1261 }, {  28,-1261 }, {  29,-1261 }, {  30,-1261 }, {  31,-1261 },
 {  32,-1261 }, {  33,-1261 }, {  34,-1261 }, {  35,-1261 }, {  36, 565 },
 {  37,-1261 }, {  38,-1261 }, {  39,-1261 }, {  40,-1261 }, {  41,-1261 },
 {   0,  20 }, {   0,2125 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1304 }, {  13,-1304 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1304 }, {  18,-1304 },
 {  19,-1304 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1304 },
 {  24,-1304 }, {  25,-1304 }, {  26, 565 }, {  27,-1304 }, {  28,-1304 },

 {  29,-1304 }, {  30,-1304 }, {  31,-1304 }, {  32,-1304 }, {  33,-1304 },
 {  34,-1304 }, {  35,-1304 }, {  36,-1304 }, {  37,-1304 }, {  38,-1304 },
 {  39,-1304 }, {  40,-1304 }, {  41,-1304 }, {   0,  20 }, {   0,2082 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1347 }, {  13,-1347 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1347 }, {  18,-1347 }, {  19,-1347 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1347 }, {  24,-1347 }, {  25,-1347 },
 {  26,-1347 }, {  27,-1347 }, {  28,-1347 }, {  29, 565 }, {  30,-1347 },
 {  31,-1347 }, {  32,-1347 }, {  33,-1347 }, {  34,-1347 }, {  35,-1347 },

 {  36,-1347 }, {  37,-1347 }, {  38,-1347 }, {  39,-1347 }, {  40,-1347 },
 {  41,-1347 }, {   0,  20 }, {   0,2039 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1390 },
 {  13,-1390 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1390 },
 {  18,-1390 }, {  19,-1390 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1390 }, {  24,-1390 }, {  25,-1390 }, {  26,-1390 }, {  27, 565 },
 {  28,-1390 }, {  29,-1390 }, {  30,-1390 }, {  31,-1390 }, {  32,-1390 },
 {  33,-1390 }, {  34,-1390 }, {  35,-1390 }, {  36,-1390 }, {  37,-1390 },
 {  38,-1390 }, {  39,-1390 }, {  40,-1390 }, {  41,-1390 }, {   0,   0 },

 {   0,1996 }, {   1, 565 }, {   2, 565 }, {   3, 565 }, {   4, 565 },
 {   5, 565 }, {   6, 565 }, {   7, 565 }, {   8,  45 }, {   9, 565 },
 {  10, 565 }, {  11, 610 }, {  12, 565 }, {  13, 565 }, {  14, 565 },
 {  15, 565 }, {  16, 565 }, {  17, 565 }, {  18, 565 }, {  19, 565 },
 {  20, 565 }, {  21, 565 }, {  22, 565 }, {  23, 565 }, {  24, 565 },
 {  25, 565 }, {  26, 565 }, {  27, 565 }, {  28, 565 }, {  29, 565 },
 {  30, 565 }, {  31, 565 }, {  32, 565 }, {  33, 565 }, {  34, 565 },
 {  35, 565 }, {  36, 565 }, {  37, 565 }, {  38, 565 }, {  39, 565 },
 {  40, 565 }, {  41, 565 }, {  42, 565 }, {  43, 565 }, {   0,   0 },
 {   0,1951 }, {   1, -45 }, {   2, -45 }, {   3, -45 }, {   4, -45 },

 {   5, -45 }, {   6, -45 }, {   7, -45 }, {   8,   0 }, {   9, -45 },
 {  10, -45 }, {  11,-1298 }, {  12, -45 }, {  13, -45 }, {  14, -45 },
 {  15, -45 }, {  16, -45 }, {  17, -45 }, {  18, -45 }, {  19, -45 },
 {  20, -45 }, {  21, -45 }, {  22, -45 }, {  23, -45 }, {  24, -45 },
 {  25, -45 }, {  26, -45 }, {  27, -45 }, {  28, -45 }, {  29, -45 },
 {  30, -45 }, {  31, -45 }, {  32, -45 }, {  33, -45 }, {  34, -45 },
 {  35, -45 }, {  36, -45 }, {  37, -45 }, {  38, -45 }, {  39, -45 },
 {  40, -45 }, {  41, -45 }, {  42, -45 }, {  43, -45 }, {   0,   0 },
 {   0,1906 }, {   1, 565 }, {   2, 565 }, {   3,-1426 }, {   4, 565 },
 {   5, 565 }, {   6, 565 }, {   7, 565 }, {   8, 565 }, {   9, 565 },

 {  10, 565 }, {  11, 565 }, {  12, 565 }, {  13, 565 }, {  14, 565 },
 {  15, 565 }, {  16, 565 }, {  17, 565 }, {  18, 565 }, {  19, 565 },
 {  20, 565 }, {  21,-608 }, {  22, 565 }, {  23, 565 }, {  24, 565 },
 {  25, 565 }, {  26, 565 }, {  27, 565 }, {  28, 565 }, {  29, 565 },
 {  30, 565 }, {  31, 565 }, {  32, 565 }, {  33, 565 }, {  34, 565 },
 {  35, 565 }, {  36, 565 }, {  37, 565 }, {  38, 565 }, {  39, 565 },
 {  40, 565 }, {  41, 565 }, {  42, 565 }, {  43, 565 }, {   0,  20 },
 {   0,1861 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1568 }, {  13,-1568 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  17,-1568 }, {  18,-1568 }, {  19,-1568 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1568 }, {  24,-1568 },
 {  25,-1568 }, {  26,-1568 }, {  27,-1568 }, {  28,-1568 }, {  29,-1568 },
 {  30,-1568 }, {  31,-1568 }, {  32,-1568 }, {  33,-1568 }, {  34,-1568 },
 {  35,-1568 }, {  36,-1568 }, {  37, 565 }, {  38,-1568 }, {  39,-1568 },
 {  40,-1568 }, {  41,-1568 }, {   0,  20 }, {   0,1818 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1611 }, {  13,-1611 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1611 }, {  18,-1611 }, {  19,-1611 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  23,-1611 }, {  24,-1611 }, {  25,-1611 }, {  26,-1611 },
 {  27, 565 }, {  28,-1611 }, {  29,-1611 }, {  30,-1611 }, {  31,-1611 },
 {  32,-1611 }, {  33,-1611 }, {  34,-1611 }, {  35,-1611 }, {  36,-1611 },
 {  37,-1611 }, {  38,-1611 }, {  39,-1611 }, {  40,-1611 }, {  41,-1611 },
 {   0,  20 }, {   0,1775 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1654 }, {  13,-1654 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1654 }, {  18,-1654 },
 {  19,-1654 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1654 },
 {  24,-1654 }, {  25,-1654 }, {  26,-1654 }, {  27,-1654 }, {  28,-1654 },

 {  29,-1654 }, {  30,-1654 }, {  31,-1654 }, {  32,-1654 }, {  33,-1654 },
 {  34,-1654 }, {  35,-1654 }, {  36,-1654 }, {  37, 565 }, {  38,-1654 },
 {  39,-1654 }, {  40,-1654 }, {  41,-1654 }, {   0,  20 }, {   0,1732 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1697 }, {  13,-1697 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1697 }, {  18,-1697 }, {  19,-1697 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1697 }, {  24,-1697 }, {  25,-1697 },
 {  26,-1697 }, {  27,-1697 }, {  28,-1697 }, {  29,-1697 }, {  30,-1697 },
 {  31,-1697 }, {  32,-1697 }, {  33,-1697 }, {  34,-1697 }, {  35,-1697 },

 {  36,-1697 }, {  37, 565 }, {  38,-1697 }, {  39,-1697 }, {  40,-1697 },
 {  41,-1697 }, {   0,  20 }, {   0,1689 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1740 },
 {  13,-1740 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1740 },
 {  18,-1740 }, {  19,-1740 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1740 }, {  24,-1740 }, {  25,-1740 }, {  26,-1740 }, {  27,-1740 },
 {  28,-1740 }, {  29,-1740 }, {  30, 565 }, {  31,-1740 }, {  32,-1740 },
 {  33,-1740 }, {  34,-1740 }, {  35,-1740 }, {  36,-1740 }, {  37,-1740 },
 {  38,-1740 }, {  39,-1740 }, {  40,-1740 }, {  41,-1740 }, {   0,  20 },

 {   0,1646 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-1783 }, {  13,-1783 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-1783 }, {  18,-1783 }, {  19,-1783 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1783 }, {  24,-1783 },
 {  25,-1783 }, {  26,-1783 }, {  27,-1783 }, {  28,-1783 }, {  29,-1783 },
 {  30,-1783 }, {  31,-1783 }, {  32,-1783 }, {  33,-1783 }, {  34,-1783 },
 {  35,-1783 }, {  36,-1783 }, {  37, 565 }, {  38,-1783 }, {  39,-1783 },
 {  40,-1783 }, {  41,-1783 }, {   0,  20 }, {   0,1603 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-1826 }, {  13,-1826 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-1826 }, {  18,-1826 }, {  19,-1826 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1826 }, {  24,-1826 }, {  25,-1826 }, {  26,-1826 },
 {  27,-1826 }, {  28,-1826 }, {  29,-1826 }, {  30,-1826 }, {  31,-1826 },
 {  32, 565 }, {  33,-1826 }, {  34,-1826 }, {  35,-1826 }, {  36,-1826 },
 {  37,-1826 }, {  38,-1826 }, {  39,-1826 }, {  40,-1826 }, {  41,-1826 },
 {   0,  20 }, {   0,1560 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1869 }, {  13,-1869 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1869 }, {  18,-1869 },
 {  19,-1869 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1869 },
 {  24,-1869 }, {  25,-1869 }, {  26,-1869 }, {  27, 565 }, {  28,-1869 },
 {  29,-1869 }, {  30,-1869 }, {  31,-1869 }, {  32,-1869 }, {  33,-1869 },
 {  34,-1869 }, {  35,-1869 }, {  36,-1869 }, {  37,-1869 }, {  38,-1869 },
 {  39,-1869 }, {  40,-1869 }, {  41,-1869 }, {   0,  20 }, {   0,1517 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-1912 }, {  13,-1912 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-1912 }, {  18,-1912 }, {  19,-1912 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  23,-1912 }, {  24,-1912 }, {  25,-1912 },
 {  26,-1912 }, {  27, 565 }, {  28,-1912 }, {  29,-1912 }, {  30,-1912 },
 {  31,-1912 }, {  32,-1912 }, {  33,-1912 }, {  34,-1912 }, {  35,-1912 },
 {  36,-1912 }, {  37,-1912 }, {  38,-1912 }, {  39,-1912 }, {  40,-1912 },
 {  41,-1912 }, {   0,  18 }, {   0,1474 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-1955 },
 {  13,-1955 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-1955 },
 {  18,-1955 }, {  19,-1955 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1955 }, {  24,-1955 }, {  25,-1955 }, {  26,-1955 }, {  27,-1955 },

 {  28,-1955 }, {  29,-1955 }, {  30,-1955 }, {  31,-1955 }, {  32,-1955 },
 {  33,-1955 }, {  34,-1955 }, {  35,-1955 }, {  36,-1955 }, {  37,-1955 },
 {  38,-1955 }, {  39,-1955 }, {  40,-1955 }, {  41,-1955 }, {   0,   0 },
 {   0,1431 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,-520 }, {   9,   0 },
 {  10,   0 }, {  11,  45 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },

 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {   0,   0 },
 {   0,1386 }, {   1, -45 }, {   2, -45 }, {   3, -45 }, {   4, -45 },
 {   5, -45 }, {   6, -45 }, {   7, -45 }, {   8,-565 }, {   9, -45 },
 {  10, -45 }, {  11,   0 }, {  12, -45 }, {  13, -45 }, {  14, -45 },
 {  15, -45 }, {  16, -45 }, {  17, -45 }, {  18, -45 }, {  19, -45 },
 {  20, -45 }, {  21, -45 }, {  22, -45 }, {  23, -45 }, {  24, -45 },
 {  25, -45 }, {  26, -45 }, {  27, -45 }, {  28, -45 }, {  29, -45 },
 {  30, -45 }, {  31, -45 }, {  32, -45 }, {  33, -45 }, {  34, -45 },
 {  35, -45 }, {  36, -45 }, {  37, -45 }, {  38, -45 }, {  39, -45 },

 {  40, -45 }, {  41, -45 }, {  42, -45 }, {  43, -45 }, {   0,   0 },
 {   0,1341 }, {   1,   0 }, {   2,   0 }, {   3,-1991 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,-1173 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {   0,  20 },

 {   0,1296 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2133 }, {  13,-2133 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2133 }, {  18,-2133 }, {  19,-2133 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2133 }, {  24,-2133 },
 {  25,-2133 }, {  26,-2133 }, {  27,-2133 }, {  28,-2133 }, {  29,-2133 },
 {  30,-2133 }, {  31,-2133 }, {  32,-2133 }, {  33,-2133 }, {  34,-2133 },
 {  35, 387 }, {  36,-2133 }, {  37,-2133 }, {  38,-2133 }, {  39,-2133 },
 {  40,-2133 }, {  41,-2133 }, {   0,  19 }, {   0,1253 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2176 }, {  13,-2176 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2176 }, {  18,-2176 }, {  19,-2176 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2176 }, {  24,-2176 }, {  25,-2176 }, {  26,-2176 },
 {  27,-2176 }, {  28,-2176 }, {  29,-2176 }, {  30,-2176 }, {  31,-2176 },
 {  32,-2176 }, {  33,-2176 }, {  34,-2176 }, {  35,-2176 }, {  36,-2176 },
 {  37,-2176 }, {  38,-2176 }, {  39,-2176 }, {  40,-2176 }, {  41,-2176 },
 {   0,  20 }, {   0,1210 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2219 }, {  13,-2219 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2219 }, {  18,-2219 },
 {  19,-2219 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2219 },
 {  24, 344 }, {  25,-2219 }, {  26,-2219 }, {  27,-2219 }, {  28,-2219 },
 {  29,-2219 }, {  30,-2219 }, {  31,-2219 }, {  32,-2219 }, {  33,-2219 },
 {  34,-2219 }, {  35,-2219 }, {  36,-2219 }, {  37,-2219 }, {  38,-2219 },
 {  39,-2219 }, {  40,-2219 }, {  41,-2219 }, {   0,  20 }, {   0,1167 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2262 }, {  13,-2262 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2262 }, {  18,-2262 }, {  19,-2262 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  23,-2262 }, {  24,-2262 }, {  25,-2262 },
 {  26,-2262 }, {  27,-2262 }, {  28, 344 }, {  29,-2262 }, {  30,-2262 },
 {  31,-2262 }, {  32,-2262 }, {  33,-2262 }, {  34,-2262 }, {  35,-2262 },
 {  36,-2262 }, {  37,-2262 }, {  38,-2262 }, {  39,-2262 }, {  40,-2262 },
 {  41,-2262 }, {   0,   7 }, {   0,1124 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2305 },
 {  13,-2305 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2305 },
 {  18,-2305 }, {  19,-2305 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2305 }, {  24,-2305 }, {  25,-2305 }, {  26,-2305 }, {  27,-2305 },

 {  28,-2305 }, {  29,-2305 }, {  30,-2305 }, {  31,-2305 }, {  32,-2305 },
 {  33,-2305 }, {  34,-2305 }, {  35,-2305 }, {  36,-2305 }, {  37,-2305 },
 {  38,-2305 }, {  39,-2305 }, {  40,-2305 }, {  41,-2305 }, {   0,  20 },
 {   0,1081 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2348 }, {  13,-2348 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2348 }, {  18,-2348 }, {  19,-2348 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2348 }, {  24, 301 },
 {  25,-2348 }, {  26,-2348 }, {  27,-2348 }, {  28,-2348 }, {  29,-2348 },
 {  30,-2348 }, {  31,-2348 }, {  32,-2348 }, {  33,-2348 }, {  34,-2348 },

 {  35,-2348 }, {  36,-2348 }, {  37,-2348 }, {  38,-2348 }, {  39,-2348 },
 {  40,-2348 }, {  41,-2348 }, {   0,  20 }, {   0,1038 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2391 }, {  13,-2391 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2391 }, {  18,-2391 }, {  19,-2391 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2391 }, {  24,-2391 }, {  25,-2391 }, {  26,-2391 },
 {  27, 301 }, {  28,-2391 }, {  29,-2391 }, {  30,-2391 }, {  31,-2391 },
 {  32,-2391 }, {  33,-2391 }, {  34,-2391 }, {  35,-2391 }, {  36,-2391 },
 {  37,-2391 }, {  38,-2391 }, {  39,-2391 }, {  40,-2391 }, {  41,-2391 },

 {   0,  20 }, {   0, 995 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2434 }, {  13,-2434 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2434 }, {  18,-2434 },
 {  19,-2434 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2434 },
 {  24,-2434 }, {  25,-2434 }, {  26,-2434 }, {  27,-2434 }, {  28,-2434 },
 {  29,-2434 }, {  30,-2434 }, {  31,-2434 }, {  32,-2434 }, {  33,-2434 },
 {  34,-2434 }, {  35,-2434 }, {  36,-2434 }, {  37, 301 }, {  38,-2434 },
 {  39,-2434 }, {  40,-2434 }, {  41,-2434 }, {   0,  20 }, {   0, 952 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2477 }, {  13,-2477 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2477 }, {  18,-2477 }, {  19,-2477 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2477 }, {  24,-2477 }, {  25,-2477 },
 {  26,-2477 }, {  27,-2477 }, {  28,-2477 }, {  29,-2477 }, {  30,-2477 },
 {  31,-2477 }, {  32,-2477 }, {  33,-2477 }, {  34,-2477 }, {  35,-2477 },
 {  36,-2477 }, {  37,-2477 }, {  38, 301 }, {  39,-2477 }, {  40,-2477 },
 {  41,-2477 }, {   0,  20 }, {   0, 909 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2520 },

 {  13,-2520 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2520 },
 {  18,-2520 }, {  19,-2520 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2520 }, {  24,-2520 }, {  25,-2520 }, {  26,-2520 }, {  27,-2520 },
 {  28,-2520 }, {  29,-2520 }, {  30,-2520 }, {  31, 301 }, {  32,-2520 },
 {  33,-2520 }, {  34,-2520 }, {  35,-2520 }, {  36,-2520 }, {  37,-2520 },
 {  38,-2520 }, {  39,-2520 }, {  40,-2520 }, {  41,-2520 }, {   0,  20 },
 {   0, 866 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2563 }, {  13,-2563 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2563 }, {  18,-2563 }, {  19,-2563 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2563 }, {  24,-2563 },
 {  25,-2563 }, {  26,-2563 }, {  27,-2563 }, {  28,-2563 }, {  29, 301 },
 {  30,-2563 }, {  31,-2563 }, {  32,-2563 }, {  33,-2563 }, {  34,-2563 },
 {  35,-2563 }, {  36,-2563 }, {  37,-2563 }, {  38,-2563 }, {  39,-2563 },
 {  40,-2563 }, {  41,-2563 }, {   0,  20 }, {   0, 823 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-2606 }, {  13,-2606 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2606 }, {  18,-2606 }, {  19,-2606 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2606 }, {  24, 301 }, {  25,-2606 }, {  26,-2606 },

 {  27,-2606 }, {  28,-2606 }, {  29,-2606 }, {  30,-2606 }, {  31,-2606 },
 {  32,-2606 }, {  33,-2606 }, {  34,-2606 }, {  35,-2606 }, {  36,-2606 },
 {  37,-2606 }, {  38,-2606 }, {  39,-2606 }, {  40,-2606 }, {  41,-2606 },
 {   0,  20 }, {   0, 780 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2649 }, {  13,-2649 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2649 }, {  18,-2649 },
 {  19,-2649 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2649 },
 {  24,-2649 }, {  25,-2649 }, {  26,-2649 }, {  27,-2649 }, {  28,-2649 },
 {  29,-2649 }, {  30,-2649 }, {  31,-2649 }, {  32,-2649 }, {  33, 301 },

 {  34,-2649 }, {  35,-2649 }, {  36,-2649 }, {  37,-2649 }, {  38,-2649 },
 {  39,-2649 }, {  40,-2649 }, {  41,-2649 }, {   0,  20 }, {   0, 737 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2692 }, {  13,-2692 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2692 }, {  18,-2692 }, {  19,-2692 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2692 }, {  24,-2692 }, {  25,-2692 },
 {  26,-2692 }, {  27,-2692 }, {  28,-2692 }, {  29,-2692 }, {  30,-2692 },
 {  31,-2692 }, {  32,-2692 }, {  33,-2692 }, {  34,-2692 }, {  35,-2692 },
 {  36,-2692 }, {  37, 301 }, {  38,-2692 }, {  39,-2692 }, {  40,-2692 },

 {  41,-2692 }, {   0,   3 }, {   0, 694 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2735 },
 {  13,-2735 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2735 },
 {  18,-2735 }, {  19,-2735 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2735 }, {  24,-2735 }, {  25,-2735 }, {  26,-2735 }, {  27,-2735 },
 {  28,-2735 }, {  29,-2735 }, {  30,-2735 }, {  31,-2735 }, {  32,-2735 },
 {  33,-2735 }, {  34,-2735 }, {  35,-2735 }, {  36,-2735 }, {  37,-2735 },
 {  38,-2735 }, {  39,-2735 }, {  40,-2735 }, {  41,-2735 }, {   0,   2 },
 {   0, 651 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2778 }, {  13,-2778 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2778 }, {  18,-2778 }, {  19,-2778 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2778 }, {  24,-2778 },
 {  25,-2778 }, {  26,-2778 }, {  27,-2778 }, {  28,-2778 }, {  29,-2778 },
 {  30,-2778 }, {  31,-2778 }, {  32,-2778 }, {  33,-2778 }, {  34,-2778 },
 {  35,-2778 }, {  36,-2778 }, {  37,-2778 }, {  38,-2778 }, {  39,-2778 },
 {  40,-2778 }, {  41,-2778 }, {   0,  20 }, {   0, 608 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  12,-2821 }, {  13,-2821 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-2821 }, {  18,-2821 }, {  19,-2821 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2821 }, {  24,-2821 }, {  25,-2821 }, {  26,-516 },
 {  27,-2821 }, {  28,-2821 }, {  29,-2821 }, {  30,-2821 }, {  31,-2821 },
 {  32,-2821 }, {  33,-2821 }, {  34,-2821 }, {  35,-2821 }, {  36,-2821 },
 {  37,-2821 }, {  38,-2821 }, {  39,-2821 }, {  40,-2821 }, {  41,-2821 },
 {   0,  20 }, {   0, 565 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2864 }, {  13,-2864 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2864 }, {  18, 172 },

 {  19,-2864 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2864 },
 {  24,-2864 }, {  25,-2864 }, {  26,-2864 }, {  27,-2864 }, {  28,-2864 },
 {  29,-2864 }, {  30,-2864 }, {  31,-2864 }, {  32,-2864 }, {  33,-2864 },
 {  34,-2864 }, {  35,-2864 }, {  36,-2864 }, {  37,-2864 }, {  38,-2864 },
 {  39,-2864 }, {  40,-2864 }, {  41,-2864 }, {   0,  20 }, {   0, 522 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  12,-2907 }, {  13,-2907 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-2907 }, {  18,-2907 }, {  19,-2907 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2907 }, {  24,-2907 }, {  25, 172 },

 {  26,-2907 }, {  27,-2907 }, {  28,-2907 }, {  29,-2907 }, {  30,-2907 },
 {  31,-2907 }, {  32,-2907 }, {  33,-2907 }, {  34,-2907 }, {  35,-2907 },
 {  36,-2907 }, {  37,-2907 }, {  38,-2907 }, {  39,-2907 }, {  40,-2907 },
 {  41,-2907 }, {   0,   1 }, {   0, 479 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-2950 },
 {  13,-2950 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-2950 },
 {  18,-2950 }, {  19,-2950 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2950 }, {  24,-2950 }, {  25,-2950 }, {  26,-2950 }, {  27,-2950 },
 {  28,-2950 }, {  29,-2950 }, {  30,-2950 }, {  31,-2950 }, {  32,-2950 },

 {  33,-2950 }, {  34,-2950 }, {  35,-2950 }, {  36,-2950 }, {  37,-2950 },
 {  38,-2950 }, {  39,-2950 }, {  40,-2950 }, {  41,-2950 }, {   0,   5 },
 {   0, 436 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-2993 }, {  13,-2993 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-2993 }, {  18,-2993 }, {  19,-2993 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2993 }, {  24,-2993 },
 {  25,-2993 }, {  26,-2993 }, {  27,-2993 }, {  28,-2993 }, {  29,-2993 },
 {  30,-2993 }, {  31,-2993 }, {  32,-2993 }, {  33,-2993 }, {  34,-2993 },
 {  35,-2993 }, {  36,-2993 }, {  37,-2993 }, {  38,-2993 }, {  39,-2993 },

 {  40,-2993 }, {  41,-2993 }, {   0,  20 }, {   0, 393 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-3036 }, {  13,-3036 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-3036 }, {  18,-3036 }, {  19,-3036 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-3036 }, {  24,-3036 }, {  25,-3036 }, {  26,-3036 },
 {  27,  86 }, {  28,-3036 }, {  29,-3036 }, {  30,-3036 }, {  31,-3036 },
 {  32,-3036 }, {  33,-3036 }, {  34,-3036 }, {  35,-3036 }, {  36,-3036 },
 {  37,-3036 }, {  38,-3036 }, {  39,-3036 }, {  40,-3036 }, {  41,-3036 },
 {   0,  20 }, {   0, 350 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-3079 }, {  13,-3079 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-3079 }, {  18,-3079 },
 {  19,-3079 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3079 },
 {  24,-3079 }, {  25,-3079 }, {  26,-3079 }, {  27,  86 }, {  28,-3079 },
 {  29,-3079 }, {  30,-3079 }, {  31,-3079 }, {  32,-3079 }, {  33,-3079 },
 {  34,-3079 }, {  35,-3079 }, {  36,-3079 }, {  37,-3079 }, {  38,-3079 },
 {  39,-3079 }, {  40,-3079 }, {  41,-3079 }, {   0,  20 }, {   0, 307 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  12,-3122 }, {  13,-3122 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  17,-3122 }, {  18,-3122 }, {  19,-3122 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-3122 }, {  24,-3122 }, {  25,-3122 },
 {  26,-3122 }, {  27,-3122 }, {  28,-3122 }, {  29,-3122 }, {  30,-3122 },
 {  31,-3122 }, {  32,-3122 }, {  33,-3122 }, {  34,-3122 }, {  35,-3122 },
 {  36,  86 }, {  37,-3122 }, {  38,-3122 }, {  39,-3122 }, {  40,-3122 },
 {  41,-3122 }, {   0,   4 }, {   0, 264 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-3165 },
 {  13,-3165 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-3165 },

 {  18,-3165 }, {  19,-3165 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-3165 }, {  24,-3165 }, {  25,-3165 }, {  26,-3165 }, {  27,-3165 },
 {  28,-3165 }, {  29,-3165 }, {  30,-3165 }, {  31,-3165 }, {  32,-3165 },
 {  33,-3165 }, {  34,-3165 }, {  35,-3165 }, {  36,-3165 }, {  37,-3165 },
 {  38,-3165 }, {  39,-3165 }, {  40,-3165 }, {  41,-3165 }, {   0,  20 },
 {   0, 221 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  12,-3208 }, {  13,-3208 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  17,-3208 }, {  18,-3208 }, {  19,-3208 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3208 }, {  24,-3208 },

 {  25,-3208 }, {  26,-3208 }, {  27,-3208 }, {  28,-3208 }, {  29,-3208 },
 {  30,-3208 }, {  31,-3208 }, {  32,-3208 }, {  33,-3208 }, {  34,-3208 },
 {  35,-3208 }, {  36,-3208 }, {  37,-3208 }, {  38,-3208 }, {  39,  88 },
 {  40,-3208 }, {  41,-3208 }, {   0,   0 }, {   0, 178 }, {   1,  88 },
 {   2,  88 }, {   0,   0 }, {   4,-2899 }, {   5,  88 }, {   6,  88 },
 {   7,  88 }, {   8,  88 }, {   9,  88 }, {  10,  88 }, {  11,  88 },
 {  12,  88 }, {  13,  88 }, {  14,  88 }, {  15,  88 }, {  16,  88 },
 {  17,  88 }, {  18,  88 }, {  19,  88 }, {  20,  88 }, {  21,  88 },
 {  22,  88 }, {  23,  88 }, {  24,  88 }, {  25,  88 }, {  26,  88 },
 {  27,  88 }, {  28,  88 }, {  29,  88 }, {  30,  88 }, {  31,  88 },

 {  32,  88 }, {  33,  88 }, {  34,  88 }, {  35,  88 }, {  36,  88 },
 {  37,  88 }, {  38,  88 }, {  39,  88 }, {  40,  88 }, {  41,  88 },
 {  42,  88 }, {  43,  88 }, {   0,  20 }, {   0, 133 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,-3296 }, {  13,-3296 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  17,-3296 }, {  18,-3296 }, {  19,-3296 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-3296 }, {  24,-3296 }, {  25,-3296 }, {  26,-3296 },
 {  27,-3296 }, {  28,-3296 }, {  29,-3296 }, {  30,  88 }, {  31,-3296 },
 {  32,-3296 }, {  33,-3296 }, {  34,-3296 }, {  35,-3296 }, {  36,-3296 },

 {  37,-3296 }, {  38,-3296 }, {  39,-3296 }, {  40,-3296 }, {  41,-3296 },
 {   0,   0 }, {   0,  90 }, {   1,   0 }, {   2,   0 }, {   0,   0 },
 {   4,-2987 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },

 {   0,  17 }, {   0,  45 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  12,-3384 }, {  13,-3384 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  17,-3384 }, {  18,-3384 },
 {  19,-3384 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3384 },
 {  24,-3384 }, {  25,-3384 }, {  26,-3384 }, {  27,-3384 }, {  28,-3384 },
 {  29,-3384 }, {  30,-3384 }, {  31,-3384 }, {  32,-3384 }, {  33,-3384 },
 {  34,-3384 }, {  35,-3384 }, {  36,-3384 }, {  37,-3384 }, {  38,-3384 },
 {  39,-3384 }, {  40,-3384 }, {  41,-3384 }, {   0,   0 }, {   0,   0 },
 {  44,  35 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[48],

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   17,   17,   18,   17,   19,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       20,   21,   22,    1,   23,    1,   24,   17,   25,   26,

       27,   28,   29,   30,   31,   17,   17,   32,   33,   34,
       35,   36,   17,   37,   38,   39,   40,   41,   17,   17,
       17,   17,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[35] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glfx_flex_debug;
int glfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glfxtext;
#line 1 "glfx.lpp"
#line 9 "glfx.lpp"
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for glfxwrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfxParser.h"
    #include "glfxClasses.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
#line 1412 "glfxScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glfxlex_destroy (void );

int glfxget_debug (void );

void glfxset_debug (int debug_flag  );

YY_EXTRA_TYPE glfxget_extra (void );

void glfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glfxget_in (void );

void glfxset_in  (FILE * in_str  );

FILE *glfxget_out (void );

void glfxset_out  (FILE * out_str  );

yy_size_t glfxget_leng (void );

char *glfxget_text (void );

int glfxget_lineno (void );

void glfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glfxwrap (void );
#else
extern int glfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( glfxtext, glfxleng, 1, glfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(glfxin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(glfxin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glfxlex (void);

#define YY_DECL int glfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glfxtext and glfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glfxleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glfxtext[glfxleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 55 "glfx.lpp"

#line 1583 "glfxScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glfxin )
			glfxin = stdin;

		if ( ! glfxout )
			glfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glfx_create_buffer(glfxin,YY_BUF_SIZE );
		}

		glfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = yy_ec[YY_SC_TO_UI(*++yy_cp)]  )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < glfxleng; ++yyl )
				if ( glfxtext[yyl] == '\n' )
					   
    glfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 56 "glfx.lpp"
glfxlval.boolean=false; return PROGRAM;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "glfx.lpp"
glfxlval.boolean=true; return PROGRAM;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 58 "glfx.lpp"
glfxlval.lineno=glfxlineno; return SHADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "glfx.lpp"
glfxlval.lineno=glfxlineno; return INTERFACE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SAMPLER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 61 "glfx.lpp"
{
                                                    string tmp(glfxtext);
                                                    size_t firstLoc=tmp.find('"')+1;
                                                    size_t secondLoc=tmp.find('"', firstLoc);
                                                    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
                                                    glfxlval.lineno=glfxlineno-1; // flex has already jumped one line, since \n was eaten
                                                    return INCLUDE;
                                                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext; return STORAGET;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=VS; return SHADER_TYPE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TC; return SHADER_TYPE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TE; return SHADER_TYPE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=GS; return SHADER_TYPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=FS; return SHADER_TYPE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=CS; return SHADER_TYPE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=atoi(glfxtext); return NUM;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.fnum=(float)atof(glfxtext); return FLOAT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return STORAGEQ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return GL_FRAGDEPTH;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=1; return NUM;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=0; return NUM;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return IDENTIFIER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LB;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RB;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EMPTY_ARRAY_BRACKETS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COMMA;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EQUALS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return SC;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COLON;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 92 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Single line comment (with possible continuation)
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 93 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Multiline comment
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 94 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {errLex(glfxtext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "glfx.lpp"
ECHO;
	YY_BREAK
#line 1852 "glfxScanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glfxin at a new source and called
			 * glfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glfxrestart(glfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 1;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --glfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glfxrestart(glfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    glfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glfx_create_buffer(glfxin,YY_BUF_SIZE );
	}

	glfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	glfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glfxpop_buffer_state();
	 *		glfxpush_buffer_state(new_buffer);
     */
	glfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glfxwrap()) processing, but the only time this flag
	 * is looked at is after glfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glfx_create_buffer()
 * 
 */
    void glfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glfxfree((void *) b->yy_ch_buf  );

	glfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glfxrestart() or at EOF.
 */
    static void glfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glfx_init_buffer was _probably_
     * called from glfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glfxensure_buffer_stack();

	/* This block is copied from glfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glfx_switch_to_buffer. */
	glfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glfx_scan_bytes() instead.
 */
YY_BUFFER_STATE glfx_scan_string (yyconst char * yystr )
{
    
	return glfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glfxtext[glfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = glfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glfxget_lineno  (void)
{
        
    return glfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *glfxget_in  (void)
{
        return glfxin;
}

/** Get the output stream.
 * 
 */
FILE *glfxget_out  (void)
{
        return glfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t glfxget_leng  (void)
{
        return glfxleng;
}

/** Get the current token.
 * 
 */

char *glfxget_text  (void)
{
        return glfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glfxset_lineno (int  line_number )
{
    
    glfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glfx_switch_to_buffer
 */
void glfxset_in (FILE *  in_str )
{
        glfxin = in_str ;
}

void glfxset_out (FILE *  out_str )
{
        glfxout = out_str ;
}

int glfxget_debug  (void)
{
        return glfx_flex_debug;
}

void glfxset_debug (int  bdebug )
{
        glfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch glfxlineno unless the option is enabled. */
    glfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glfxin = stdin;
    glfxout = stdout;
#else
    glfxin = (FILE *) 0;
    glfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glfxlex_init()
     */
    return 0;
}

/* glfxlex_destroy is for both reentrant and non-reentrant scanners. */
int glfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glfxfree (void * ptr )
{
	free( (char *) ptr );	/* see glfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 96 "glfx.lpp"



void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<glfxlineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
            throw "Brace balance error\n";
        else if(c==openChar)
            braceBalance++;
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
                throw "Brace balance error\n";
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

